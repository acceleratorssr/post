// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: recommend/v1/rc.proto

package recommendv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecommendService_GetItemByID_FullMethodName  = "/recommend.v1.RecommendService/GetItemByID"
	RecommendService_GetNeighbors_FullMethodName = "/recommend.v1.RecommendService/GetNeighbors"
	RecommendService_GetRecommend_FullMethodName = "/recommend.v1.RecommendService/GetRecommend"
	RecommendService_GetUser_FullMethodName      = "/recommend.v1.RecommendService/GetUser"
	RecommendService_GetUsers_FullMethodName     = "/recommend.v1.RecommendService/GetUsers"
)

// RecommendServiceClient is the client API for RecommendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendServiceClient interface {
	GetItemByID(ctx context.Context, in *GetItemByIDRequest, opts ...grpc.CallOption) (*GetItemByIDResponse, error)
	GetNeighbors(ctx context.Context, in *GetNeighborsRequest, opts ...grpc.CallOption) (*GetNeighborsResponse, error)
	GetRecommend(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
}

type recommendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendServiceClient(cc grpc.ClientConnInterface) RecommendServiceClient {
	return &recommendServiceClient{cc}
}

func (c *recommendServiceClient) GetItemByID(ctx context.Context, in *GetItemByIDRequest, opts ...grpc.CallOption) (*GetItemByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemByIDResponse)
	err := c.cc.Invoke(ctx, RecommendService_GetItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceClient) GetNeighbors(ctx context.Context, in *GetNeighborsRequest, opts ...grpc.CallOption) (*GetNeighborsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNeighborsResponse)
	err := c.cc.Invoke(ctx, RecommendService_GetNeighbors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceClient) GetRecommend(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendResponse)
	err := c.cc.Invoke(ctx, RecommendService_GetRecommend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, RecommendService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, RecommendService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendServiceServer is the server API for RecommendService service.
// All implementations must embed UnimplementedRecommendServiceServer
// for forward compatibility.
type RecommendServiceServer interface {
	GetItemByID(context.Context, *GetItemByIDRequest) (*GetItemByIDResponse, error)
	GetNeighbors(context.Context, *GetNeighborsRequest) (*GetNeighborsResponse, error)
	GetRecommend(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	mustEmbedUnimplementedRecommendServiceServer()
}

// UnimplementedRecommendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecommendServiceServer struct{}

func (UnimplementedRecommendServiceServer) GetItemByID(context.Context, *GetItemByIDRequest) (*GetItemByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemByID not implemented")
}
func (UnimplementedRecommendServiceServer) GetNeighbors(context.Context, *GetNeighborsRequest) (*GetNeighborsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeighbors not implemented")
}
func (UnimplementedRecommendServiceServer) GetRecommend(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommend not implemented")
}
func (UnimplementedRecommendServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRecommendServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedRecommendServiceServer) mustEmbedUnimplementedRecommendServiceServer() {}
func (UnimplementedRecommendServiceServer) testEmbeddedByValue()                          {}

// UnsafeRecommendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendServiceServer will
// result in compilation errors.
type UnsafeRecommendServiceServer interface {
	mustEmbedUnimplementedRecommendServiceServer()
}

func RegisterRecommendServiceServer(s grpc.ServiceRegistrar, srv RecommendServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecommendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecommendService_ServiceDesc, srv)
}

func _RecommendService_GetItemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).GetItemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_GetItemByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).GetItemByID(ctx, req.(*GetItemByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendService_GetNeighbors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNeighborsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).GetNeighbors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_GetNeighbors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).GetNeighbors(ctx, req.(*GetNeighborsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendService_GetRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).GetRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_GetRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).GetRecommend(ctx, req.(*GetRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommendService_ServiceDesc is the grpc.ServiceDesc for RecommendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recommend.v1.RecommendService",
	HandlerType: (*RecommendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemByID",
			Handler:    _RecommendService_GetItemByID_Handler,
		},
		{
			MethodName: "GetNeighbors",
			Handler:    _RecommendService_GetNeighbors_Handler,
		},
		{
			MethodName: "GetRecommend",
			Handler:    _RecommendService_GetRecommend_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _RecommendService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _RecommendService_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommend/v1/rc.proto",
}
