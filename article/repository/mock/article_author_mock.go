// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/article_author.go
//
// Generated by this command:
//
//	mockgen -source=./repository/article_author.go -destination=./repository/mock/article_author_mock.go --package=articleRepoMock
//

// Package articleRepoMock is a generated GoMock package.
package articleRepoMock

import (
	context "context"
	domain "post/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleAuthorRepository is a mock of ArticleAuthorRepository interface.
type MockArticleAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleAuthorRepositoryMockRecorder
}

// MockArticleAuthorRepositoryMockRecorder is the mock recorder for MockArticleAuthorRepository.
type MockArticleAuthorRepositoryMockRecorder struct {
	mock *MockArticleAuthorRepository
}

// NewMockArticleAuthorRepository creates a new mock instance.
func NewMockArticleAuthorRepository(ctrl *gomock.Controller) *MockArticleAuthorRepository {
	mock := &MockArticleAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockArticleAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleAuthorRepository) EXPECT() *MockArticleAuthorRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleAuthorRepository) Create(ctx context.Context, art domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleAuthorRepositoryMockRecorder) Create(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleAuthorRepository)(nil).Create), ctx, art)
}

// GetByID mocks base method.
func (m *MockArticleAuthorRepository) GetByID(ctx context.Context, id int64) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorByID", ctx, id)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockArticleAuthorRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByID", reflect.TypeOf((*MockArticleAuthorRepository)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockArticleAuthorRepository) List(ctx context.Context, uid int64, limit, offset int) ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelf", ctx, uid, limit, offset)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockArticleAuthorRepositoryMockRecorder) List(ctx, uid, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelf", reflect.TypeOf((*MockArticleAuthorRepository)(nil).List), ctx, uid, limit, offset)
}

// Update mocks base method.
func (m *MockArticleAuthorRepository) Update(ctx context.Context, art domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticleAuthorRepositoryMockRecorder) Update(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleAuthorRepository)(nil).Update), ctx, art)
}
