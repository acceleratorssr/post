// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/cache/like.go
//
// Generated by this command:
//
//	mockgen -source=./repository/cache/like.go -destination=./repository/cache/mock/like_mock.go --package=cacheMocks
//

// Package cacheMocks is a generated GoMock package.
package cacheMocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleLikeCache is a mock of ArticleLikeCache interface.
type MockArticleLikeCache struct {
	ctrl     *gomock.Controller
	recorder *MockArticleLikeCacheMockRecorder
}

// MockArticleLikeCacheMockRecorder is the mock recorder for MockArticleLikeCache.
type MockArticleLikeCacheMockRecorder struct {
	mock *MockArticleLikeCache
}

// NewMockArticleLikeCache creates a new mock instance.
func NewMockArticleLikeCache(ctrl *gomock.Controller) *MockArticleLikeCache {
	mock := &MockArticleLikeCache{ctrl: ctrl}
	mock.recorder = &MockArticleLikeCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleLikeCache) EXPECT() *MockArticleLikeCacheMockRecorder {
	return m.recorder
}

// DecrCount mocks base method.
func (m *MockArticleLikeCache) DecrCount(ctx context.Context, objType string, objID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrCount", ctx, objType, objID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrCount indicates an expected call of DecrCount.
func (mr *MockArticleLikeCacheMockRecorder) DecrCount(ctx, objType, objID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrCount", reflect.TypeOf((*MockArticleLikeCache)(nil).DecrCount), ctx, objType, objID)
}

// GetCount mocks base method.
func (m *MockArticleLikeCache) GetCount(ctx context.Context, objType string, objID uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, objType, objID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockArticleLikeCacheMockRecorder) GetCount(ctx, objType, objID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockArticleLikeCache)(nil).GetCount), ctx, objType, objID)
}

// GetCountByPrefix mocks base method.
func (m *MockArticleLikeCache) GetCountByPrefix(ctx context.Context, prefix string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountByPrefix", ctx, prefix)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountByPrefix indicates an expected call of GetCountByPrefix.
func (mr *MockArticleLikeCacheMockRecorder) GetCountByPrefix(ctx, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountByPrefix", reflect.TypeOf((*MockArticleLikeCache)(nil).GetCountByPrefix), ctx, prefix)
}

// IncrCount mocks base method.
func (m *MockArticleLikeCache) IncrCount(ctx context.Context, objType string, objID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrCount", ctx, objType, objID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrCount indicates an expected call of IncrCount.
func (mr *MockArticleLikeCacheMockRecorder) IncrCount(ctx, objType, objID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrCount", reflect.TypeOf((*MockArticleLikeCache)(nil).IncrCount), ctx, objType, objID)
}

// IncrReadCount mocks base method.
func (m *MockArticleLikeCache) IncrReadCount(ctx context.Context, objType string, objID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCount", ctx, objType, objID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCount indicates an expected call of IncrReadCount.
func (mr *MockArticleLikeCacheMockRecorder) IncrReadCount(ctx, objType, objID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCount", reflect.TypeOf((*MockArticleLikeCache)(nil).IncrReadCount), ctx, objType, objID)
}
