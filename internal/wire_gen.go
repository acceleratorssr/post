// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	repository2 "post/interactive/repository"
	cache2 "post/interactive/repository/cache"
	dao2 "post/interactive/repository/dao"
	service2 "post/interactive/service"
	"post/internal/events"
	"post/internal/ioc"
	"post/internal/redis_distributed_lock"
	"post/internal/repository"
	"post/internal/repository/cache"
	"post/internal/repository/dao"
	"post/internal/service"
	"post/internal/web"
)

// Injectors from wire.go:

func InitApp() *App {
	db := ioc.InitDB()
	articleDao := dao.NewGORMArticleDao(db)
	cmdable := ioc.InitRedis()
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleAuthorRepository := repository.NewArticleAuthorRepository(articleDao, articleCache)
	articleReaderRepository := repository.NewArticleReaderRepository(articleDao)
	client := ioc.InitKafka()
	syncProducer := ioc.NewKafkaSyncProducer(client)
	producer := events.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleAuthorRepository, articleReaderRepository, producer)
	articleLikeDao := dao2.NewGORMArticleLikeDao(db)
	articleLikeCache := cache2.NewRedisArticleLikeCache(cmdable)
	likeRepository := repository2.NewLikeRepository(articleLikeDao, articleLikeCache)
	likeService := service2.NewLikeService(likeRepository)
	likeServiceClient := ioc.InitIntrGRPCClient(likeService)
	articleHandler := web.NewArticleHandler(articleService, likeServiceClient)
	engine := ioc.InitWebServer(articleHandler)
	rankCache := cache.NewRankCache(cmdable)
	localCacheForRank := cache.NewLocalCacheForRank()
	rankRepository := repository.NewBatchRankCache(rankCache, localCacheForRank)
	rankService := service.NewBatchRankService(articleService, likeServiceClient, rankRepository)
	redis_distributed_lockClient := redis_distributed_lock.NewClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankService, redis_distributed_lockClient)
	cron := ioc.InitJobs(rankingJob)
	jobDAO := dao.NewGORMJobDAO(db)
	jobRepository := repository.NewPreemptJobRepository(jobDAO)
	jobService := service.NewCronJobService(jobRepository)
	localFuncExecutor := ioc.InitLocalFuncExecutor(rankService)
	scheduler := ioc.InitScheduler(jobService, localFuncExecutor)
	app := &App{
		server:         engine,
		cron:           cron,
		cronJobService: jobService,
		scheduler:      scheduler,
		articleHandler: articleHandler,
		db:             db,
	}
	return app
}

// wire.go:

var rankingServiceSet = wire.NewSet(cache.NewRankCache, repository.NewBatchRankCache, service.NewBatchRankService)
