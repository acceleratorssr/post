// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"post/events"
	"post/ioc"
	"post/repository"
	"post/repository/cache"
	"post/repository/dao"
	"post/service"
	"post/web"
)

// Injectors from wire.go:

func InitApp() *App {
	db := ioc.InitDB()
	articleDao := dao.NewGORMArticleDao(db)
	cmdable := ioc.InitRedis()
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleAuthorRepository := repository.NewArticleAuthorRepository(articleDao, articleCache)
	articleReaderRepository := repository.NewArticleReaderRepository(articleDao)
	client := ioc.InitKafka()
	syncProducer := ioc.NewKafkaSyncProducer(client)
	producer := events.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleAuthorRepository, articleReaderRepository, producer)
	articleLikeDao := dao.NewGORMArticleLikeDao(db)
	likeRepository := repository.NewLikeRepository(articleLikeDao, articleCache)
	likeService := service.NewLikeService(likeRepository)
	articleHandler := web.NewArticleHandler(articleService, likeService)
	engine := ioc.InitWebServer(articleHandler)
	batchKafkaConsumer := events.NewBatchKafkaConsumer(client, likeRepository)
	v := ioc.NewKafkaConsumer(batchKafkaConsumer)
	app := &App{
		server:    engine,
		consumers: v,
	}
	return app
}
